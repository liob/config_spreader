#!/usr/bin/env python

import sys, os
import logging
import ConfigParser
import xmlrpclib
import base64

config = ConfigParser.SafeConfigParser({'here': sys.path[0]})
try:
    config.read(os.path.join(sys.path[0], 'config_spreader.conf'))
except:
    sys.exit("Could not read config_spreader.conf")
   
url = config.get('main', 'url')
debug = config.get('main', 'debug')
try:
    globalPrefix = config.get('main', 'prefix')
except:
    globalPrefix = None

if debug == "true" or debug == "True" or debug == "1":
    FORMAT = "%(asctime)-15s %(message)s"
    logging.basicConfig(level=logging.DEBUG, format=FORMAT)
else:
    logging.basicConfig(level=logging.INFO)

client = xmlrpclib.Server(url, verbose=0)


def pushToChannel(srcChannel, dstChannel, srcChannelKey, dstChannelKey):
    def differ(dict1, dict2):
        """ check if two dicts do differ """
        for key in dict1.keys():
            if key in dict2:
                if key == "contents":   # dirty bugfix
                    if not str(dict1[key]).strip() == str(dict2[key]).strip():
                        return True
                else:
                    if not str(dict1[key]) == str(dict2[key]):
                        return True
            else:
                return True
        return False
    
    #check if config srcChannel exists in source org
    if not client.configchannel.channelExists(srcChannelKey, srcChannel) == 1:
        logging.error("source srcChannel %s not found!" % srcChannel)
        return False
    #check if dest srcChannel exists. If not create it.
    if not client.configchannel.channelExists(dstChannelKey, dstChannel) == 1:
        logging.info("created dest channel %s" % dstChannel)
        client.configchannel.create(dstChannelKey, dstChannel, dstChannel, "autogenerated Config Channel")
    
    #check the meta information of the dest channel
    srcChannelInfo = client.configchannel.lookupChannelInfo(srcChannelKey, [srcChannel])[0]
    client.configchannel.update(dstChannelKey, dstChannel, srcChannelInfo["name"], srcChannelInfo["description"])
    
    existingPaths = []
    for item in client.configchannel.listFiles(dstChannelKey, dstChannel):
        existingPaths.append(item["path"])
    logging.debug("existing paths: %s" % str(existingPaths))
    paths2push = []
    for item in client.configchannel.listFiles(srcChannelKey, srcChannel):
        paths2push.append(item["path"])
    logging.debug("paths2push: %s" % str(paths2push))
    
    
    for path in client.configchannel.lookupFileInfo(srcChannelKey, srcChannel, paths2push):
        logging.debug("checking file %s" % path["path"])
        pathInfo = {}
        if path["path"] in existingPaths:
            existingPathInfo = client.configchannel.lookupFileInfo(dstChannelKey, dstChannel, [path["path"]])[0]
            if "permissions" in existingPathInfo:
                existingPathInfo["permissions"] = str(existingPathInfo["permissions"])
        else:
            existingPathInfo = {}
            
        if path["type"] == "symlink":
            pathInfo["target_path"] = path["target_path"]
            if differ(pathInfo, existingPathInfo):
                logging.debug("they differ. uploading new content")
                client.configchannel.createOrUpdateSymlink(dstChannelKey, dstChannel, path["path"], pathInfo)
        
        elif path["type"] == "directory":
            pathInfo["permissions"] = str(path["permissions_mode"])
            pathInfo["owner"] = path["owner"]
            pathInfo["group"] = path["group"]
            if differ(pathInfo, existingPathInfo):
                logging.debug("they differ. uploading new content")
                client.configchannel.createOrUpdatePath(dstChannelKey, dstChannel, path["path"], 1, pathInfo)
            
        elif path["type"] == "file":
            pathInfo["permissions"] = str(path["permissions_mode"])
            pathInfo["owner"] = path["owner"]
            pathInfo["group"] = path["group"]
            pathInfo["contents"] = base64.b64encode(path["contents"])
            pathInfo["macro-start-delimiter"] = path["macro-start-delimiter"]
            pathInfo["macro-end-delimiter"] = path["macro-end-delimiter"]
            pathInfo["contents_enc64"] = "true"
            if differ(pathInfo, existingPathInfo):
                logging.debug("they differ. uploading new content")
                client.configchannel.createOrUpdatePath(dstChannelKey, dstChannel, path["path"], False, pathInfo)
            
            
        if path["path"] in existingPaths:
            existingPaths.pop(existingPaths.index(path["path"]))
        
    # delete obsolete files/paths in target channel
    logging.debug("obsolete items: %s" % str(existingPaths))
    if len(existingPaths) > 0:
        logging.debug("deleting obsolete items: %s" % str(existingPaths))
        client.configchannel.deleteFiles(dstChannelKey, dstChannel, existingPaths)
        
    

# generate a dict of organisations with access codes
orgs = {}
for org in config.options('orgs'):
    if org == "here":
        continue
    access = config.get('orgs', org)
    user, password = access.split(",", 1)
    user, password = user.strip(), password.strip()
    orgs[org] = {"user": user, "password": password, "key": None}

for channel in config.sections():
    if channel == "main" or channel == "orgs":
        continue
    src_org = config.get(channel, "src_org")
    dst_org = []
    for item in config.get(channel, "dst_org").split(","):
        dst_org.append(item.strip())
    try:
        prefix = config.get(channel, "prefix")
    except:
        prefix = None
    for dst in dst_org:
        logging.info("pushing channel \"%s\" from org:%s to org:%s" % (channel, src_org, dst))
        srcChannelKey = client.auth.login(orgs[src_org]["user"], orgs[src_org]["password"])
        dstChannelKey = client.auth.login(orgs[dst]["user"], orgs[dst]["password"])
        if prefix:
            dstChannel = prefix + channel
        elif globalPrefix:
            dstChannel = globalPrefix + channel
        else:
            dstChannel = channel
        pushToChannel(channel, dstChannel, srcChannelKey, dstChannelKey)
        